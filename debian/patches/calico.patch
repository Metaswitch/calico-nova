Index: calico-nova/nova/network/model.py
===================================================================
--- calico-nova.orig/nova/network/model.py	2015-09-22 18:30:29.061754445 +0100
+++ calico-nova/nova/network/model.py	2015-09-22 18:31:19.055310106 +0100
@@ -42,6 +42,7 @@
 VIF_TYPE_VHOSTUSER = 'vhostuser'
 VIF_TYPE_VROUTER = 'vrouter'
 VIF_TYPE_OTHER = 'other'
+VIF_TYPE_TAP = 'tap'
 
 # Constants for dictionary keys in the 'vif_details' field in the VIF
 # class
@@ -65,6 +66,10 @@
 # into ovs bridge. Valid values are True and False
 VIF_DETAILS_VHOSTUSER_OVS_PLUG = 'vhostuser_ovs_plug'
 
+# Constants for dictionary keys in the 'vif_details' field that are
+# valid for VIF_TYPE_TAP.
+VIF_DETAILS_TAP_MAC_ADDRESS = 'mac_address'
+
 # Define supported virtual NIC types. VNIC_TYPE_DIRECT and VNIC_TYPE_MACVTAP
 # are used for SR-IOV ports
 VNIC_TYPE_NORMAL = 'normal'
Index: calico-nova/nova/tests/unit/network/test_neutronv2.py
===================================================================
--- calico-nova.orig/nova/tests/unit/network/test_neutronv2.py	2015-09-22 18:30:29.061754445 +0100
+++ calico-nova/nova/tests/unit/network/test_neutronv2.py	2015-09-22 18:31:19.055310106 +0100
@@ -2438,6 +2438,12 @@
         self.assertTrue(net['should_create_bridge'])
         self.assertIsNone(iid)
 
+    def test_nw_info_build_network_tap(self):
+        net, iid = self._test_nw_info_build_network(model.VIF_TYPE_TAP)
+        self.assertIsNone(net['bridge'])
+        self.assertNotIn('should_create_bridge', net)
+        self.assertIsNone(iid)
+
     def test_nw_info_build_network_other(self):
         net, iid = self._test_nw_info_build_network(None)
         self.assertIsNone(net['bridge'])
Index: calico-nova/nova/tests/unit/virt/libvirt/test_vif.py
===================================================================
--- calico-nova.orig/nova/tests/unit/virt/libvirt/test_vif.py	2015-09-22 18:30:29.065754573 +0100
+++ calico-nova/nova/tests/unit/virt/libvirt/test_vif.py	2015-09-22 18:31:19.055310106 +0100
@@ -268,6 +268,11 @@
                                     type=network_model.VIF_TYPE_MIDONET,
                                     devname='tap-xxx-yyy-zzz')
 
+    vif_tap = network_model.VIF(id='vif-xxx-yyy-zzz',
+                                address='ca:fe:de:ad:be:ef',
+                                type=network_model.VIF_TYPE_TAP,
+                                devname='tap-xxx-yyy-zzz')
+
     vif_iovisor = network_model.VIF(id='vif-xxx-yyy-zzz',
                                    address='ca:fe:de:ad:be:ef',
                                    network=network_bridge,
@@ -1000,6 +1005,24 @@
         self._assertTypeAndMacEquals(node, "ethernet", "target", "dev",
                                      self.vif_midonet, br_want)
 
+    def test_tap_ethernet_vif_driver(self):
+        d = vif.LibvirtGenericVIFDriver()
+        br_want = self.vif_tap['devname']
+        xml = self._get_instance_xml(d, self.vif_tap)
+        node = self._get_node(xml)
+        self._assertTypeAndMacEquals(node, "ethernet", "target", "dev",
+                                     self.vif_tap, br_want)
+
+    @mock.patch('nova.network.linux_net.device_exists')
+    def test_plug_tap(self, device_exists):
+        device_exists.return_value = True
+        d = vif.LibvirtGenericVIFDriver()
+        d.plug_tap(None, self.vif_tap)
+
+    def test_unplug_tap(self):
+        d = vif.LibvirtGenericVIFDriver()
+        d.unplug_tap(None, self.vif_tap)
+
     def test_generic_8021qbh_driver(self):
         d = vif.LibvirtGenericVIFDriver()
         xml = self._get_instance_xml(d, self.vif_8021qbh)
Index: calico-nova/nova/virt/libvirt/vif.py
===================================================================
--- calico-nova.orig/nova/virt/libvirt/vif.py	2015-09-22 18:30:29.065754573 +0100
+++ calico-nova/nova/virt/libvirt/vif.py	2015-09-22 18:31:19.055310106 +0100
@@ -318,6 +318,16 @@
 
         return conf
 
+    def get_config_tap(self, instance, vif, image_meta,
+                       inst_type, virt_type):
+        conf = self.get_base_config(instance, vif, image_meta,
+                                    inst_type, virt_type)
+
+        dev = self.get_vif_devname(vif)
+        designer.set_vif_host_backend_ethernet_config(conf, dev)
+
+        return conf
+
     def get_config_mlnx_direct(self, instance, vif, image_meta,
                                inst_type, virt_type):
         conf = self.get_base_config(instance, vif, image_meta,
@@ -535,6 +545,12 @@
         except processutils.ProcessExecutionError:
             LOG.exception(_LE("Failed while plugging vif"), instance=instance)
 
+    def plug_tap(self, instance, vif):
+        """Plug a VIF_TYPE_TAP virtual interface."""
+        dev = self.get_vif_devname(vif)
+        mac = vif['details'].get(network_model.VIF_DETAILS_TAP_MAC_ADDRESS)
+        linux_net.create_tap_dev(dev, mac)
+
     def plug_vhostuser(self, instance, vif):
         ovs_plug = vif['details'].get(
                                 network_model.VIF_DETAILS_VHOSTUSER_OVS_PLUG,
@@ -719,6 +735,15 @@
             linux_net.delete_net_dev(dev)
         except processutils.ProcessExecutionError:
             LOG.exception(_LE("Failed while unplugging vif"),
+                          instance=instance)
+
+    def unplug_tap(self, instance, vif):
+        """Unplug a VIF_TYPE_TAP virtual interface."""
+        dev = self.get_vif_devname(vif)
+        try:
+            linux_net.delete_net_dev(dev)
+        except processutils.ProcessExecutionError:
+            LOG.exception(_LE("Failed while unplugging vif"),
                           instance=instance)
 
     def unplug_iovisor(self, instance, vif):
